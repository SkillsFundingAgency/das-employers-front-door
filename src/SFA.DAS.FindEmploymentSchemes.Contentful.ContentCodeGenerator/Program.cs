using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using Contentful.Core;
using Microsoft.AspNetCore.Html;
using SFA.DAS.FindEmploymentSchemes.Contentful.Services;

namespace SFA.DAS.FindEmploymentSchemes.Contentful.ContentCodeGenerator
{
    internal class Program
    {
        static async Task Main(string[] args)
        {
            var httpClient = new HttpClient();
            var client = new ContentfulClient(httpClient,
                "",
                "",
                "082i50qdtar9");

            var htmlRenderer = ContentService.CreateHtmlRenderer();
            var contentService = new ContentService(client, htmlRenderer);

            var content = await contentService.Update();

            Console.Write(Preamble());

            GenerateSchemesContent(content.Schemes);

            GenerateFilterContent<Model.Content.MotivationsFilter>(content.MotivationsFilters);
            GenerateFilterContent<Model.Content.PayFilter>(content.PayFilters);
            GenerateFilterContent<Model.Content.SchemeLengthFilter>(content.SchemeLengthFilters);

            GeneratePagesContent(content.Pages);

            Console.WriteLine(Closing());
        }

        private static void GeneratePagesContent(IEnumerable<Model.Content.Page> pages)
        {
            Console.WriteLine(@"        private IEnumerable<Page>? _page;
        public IEnumerable<Page> Pages => _page ??= new[]
        {
");

            foreach (var page in pages)
            {
                Console.WriteLine($"            new Page(\"{page.Title}\",");
                Console.WriteLine($"                \"{page.Url}\",");
                Console.WriteLine($"                {GenerateHtmlString(page.Content)}");
                Console.WriteLine("            ),");
            }

            Console.WriteLine(@"        };");
        }

        private static void GenerateSchemesContent(IEnumerable<Model.Content.Scheme> schemes)
        {
            Console.WriteLine(@"        private IEnumerable<Scheme>? _schemes;
        public IEnumerable<Scheme> Schemes => _schemes ??= new[]
        {
            // _    _                                _
            //| |  | |                              | |
            //| |__| | ___ _   _   _   _  ___  _   _| |
            //|  __  |/ _ \ | | | | | | |/ _ \| | | | |
            //| |  | |  __/ |_| | | |_| | (_) | |_| |_|
            //|_|  |_|\___|\__, |  \__, |\___/ \__,_(_)
            //              __/ |   __/ |
            //              |___/   |___/               
            //
            // these schemes are generated by the TestHarness from Contentful, so don't directly make changes here!!!
            //
");

            foreach (var scheme in schemes)
            {
                Console.WriteLine($"            new Scheme(\"{scheme.Name}\",");
                Console.WriteLine($"                {GenerateHtmlString(scheme.ShortDescription)},");
                Console.WriteLine($"                {GenerateHtmlString(scheme.ShortCost)},");
                Console.WriteLine($"                {GenerateHtmlString(scheme.ShortBenefits)},");
                Console.WriteLine($"                {GenerateHtmlString(scheme.ShortTime)},");
                Console.WriteLine($"                \"{scheme.Url}\", {scheme.Size},");

                Console.Write("             new string[] {");
                Console.Write($"                {string.Join(", ", scheme.FilterAspects.Select(f => $"\"{f}\""))}");
                Console.WriteLine("             },");

                Console.WriteLine($"                {GenerateHtmlString(scheme.DetailsPageOverride)},");
                Console.WriteLine($"                {GenerateHtmlString(scheme.Description)},");
                Console.WriteLine($"                {GenerateHtmlString(scheme.Cost)},");
                Console.WriteLine($"                {GenerateHtmlString(scheme.Responsibility)},");
                Console.WriteLine($"                {GenerateHtmlString(scheme.Benefits)},");
                Console.WriteLine($"                {GenerateHtmlString(scheme.CaseStudies)},");
                Console.WriteLine($"                \"{scheme.OfferHeader}\",");
                Console.WriteLine($"                {GenerateHtmlString(scheme.Offer)}");
                Console.WriteLine("                ),");
            }

            Console.WriteLine(@"        };");
        }

        private static void GenerateFilterContent<T>(IEnumerable<T> filters)
            where T : Model.Content.Interfaces.IFilter
        {
            string filterTypeName = typeof(T).Name;
            string backingName = $"_{char.ToLowerInvariant(filterTypeName[0])}{filterTypeName.Substring(1)}s";

            Console.WriteLine($@"        private IEnumerable<{filterTypeName}>? {backingName};
        public IEnumerable<{filterTypeName}> {filterTypeName}s => {backingName} ??= new[]
        {{");

            foreach (T filter in filters)
            {
                Console.WriteLine($"            new {filterTypeName}(\"{filter.Id}\", \"{filter.Description}\"),");
            }

            Console.WriteLine("        };");
        }

        private static string Preamble()
        {
            return @"using System.Collections.Generic;
using Microsoft.AspNetCore.Html;
using SFA.DAS.FindEmploymentSchemes.Contentful.Model.Content;
using SFA.DAS.FindEmploymentSchemes.Contentful.Model.Content.Interfaces;

namespace SFA.DAS.FindEmploymentSchemes.Contentful.Content
{
    public class GeneratedContent : IContent
    {
";
        }

        private static string Closing()
        {
            return @"    }
}";
        }

        private static string GenerateHtmlString(HtmlString? content)
        {
            if (content == null)
                return "null";

            return $"new HtmlString(@\"{content.Value.Replace("\"", "\"\"")}\")";
        }
    }
}
